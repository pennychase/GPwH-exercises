module Primes where

-- Refactor to use Either, instead of Maybem, to report erros

data PrimeError = TooLarge | InvalidValue

instance Show PrimeError where
    show TooLarge = "Value exceeds max bound"
    show InvalidValue = "Value is not a valid candiate for prime checking"

-- Eratosthenes Sieve
sieve :: [Int] -> [Int]
sieve [] = []
sieve (nextPrime:rest) = nextPrime : sieve noFactors
    where
        noFactors = filter (not . (0 ==) . (`mod` nextPrime)) rest

-- primes generated by the sieve
maxN :: Int
maxN = 10000

primes :: [Int]
primes = sieve [2 .. maxN]

-- test for primeness
isPrime :: Int -> Either PrimeError Bool
isPrime n   | n < 2 = Left InvalidValue
            | n > maxN = Left TooLarge
            | otherwise = Right (n `elem` primes)

-- finding prime factors
unsafePrimeFactors :: Int -> [Int] -> [Int]
unsafePrimeFactors 0 [] = []
unsafePrimeFactors n [] = []
unsafePrimeFactors n (next:primes') = 
    if n `mod` next == 0
    then next:unsafePrimeFactors (n `div` next) (next:primes')
    else unsafePrimeFactors n primes'

primeFactors :: Int -> Either PrimeError [Int]
primeFactors n  | n < 2 = Left InvalidValue
                | n > maxN = Left TooLarge
                | otherwise = Right (unsafePrimeFactors n primesLessThanN)
    where
        primesLessThanN = filter (n >=) primes

